/* adapted from https://codepen.io/madebygus/pen/MmzWWW */

body {
	// background: #209DD2;
	background: black;
}

$notificationSqDim: 100px;
$iconBorder: 10px;
$boxShadowBlur: 15px;

// ANIMATION CONTROL
$durationSpin: 300ms;
$durationFade: 550ms;

.donation {
	position: absolute;
	top: $boxShadowBlur;
	right: $boxShadowBlur;

	height: $notificationSqDim;
	border-radius: $notificationSqDim / 2;
	background: white;
	// box-shadow: 0 3px 20px #1E7195; // (-20, -2C, -3D)
	box-shadow: 0 0 $boxShadowBlur red;

	display: flex;
	flex-direction: row-reverse;
	align-items: center;
	justify-content: flex-start;

	// use transition to fade in/out when adding a new donation
	// transition: 1s ease-out;

	// properties we'll animate for "expansion"
	padding-left: 0;
	max-width: $notificationSqDim;
	opacity: 0;

	// use the animate class to trigger animation
	&.animate {
		animation-name: fadeIn, widenForContent;
		animation-delay: 0s, $durationFade;
		animation-duration: $durationFade, $durationSpin;
		animation-timing-function: linear;
		animation-fill-mode: forwards;

		.circle {
			animation: spin360 $durationSpin linear $durationFade forwards;
		}

		.donor {
			animation: fadeInAndExpand $durationFade linear $durationFade+$durationSpin normal forwards;
		}
	}

	&.reverse {

		/*
		 * After hours of trying to get the stupid thing to fade out,
		 * this was discovered to work. I don't know why, and at this
		 * point, I don't care. My guess is it has something to do with
		 * substituting animation[0] to fadeToReset.
		 */
		animation-name: fadeToReset, widenForContent;
		// animation-delay: 0s;
		animation-duration: 250ms;
		// animation-timing-function: linear;
		// animation-fill-mode: both;
		// animation-direction: reverse;
	}


	.circle {
		width: $notificationSqDim - 2 * $iconBorder;
		height: $notificationSqDim - 2 * $iconBorder;
		border-radius: 50%;
		background: #E4BF2B;
		margin: $iconBorder;

		// guarantee this doesn't get squished during animation
		flex-shrink: 0;

		display: flex;
		flex-direction: column;
		justify-content: center;
		align-items: center;

		.icon {
			font-size: 50px;
			color: #fff;
			line-height: 0;

			.fa, .fas {
				line-height: 0;
			}
		}
	}

	.donor {
		text-align: right;

		// properties we'll animate for "expansion"
		opacity: 0;
		flex-shrink: 1;

		p {
			margin: 0;
		}

		#name {
			font-size: 22px;
			font-weight: bold;
		}

	}
}

@keyframes fadeInAndExpand {
	  0% { flex-shrink: 1; opacity: 0; }
	100% { flex-shrink: 0; opacity: 1; }
}

@keyframes fadeIn {
	  0% { opacity: 0; }
	100% { opacity: 1; }
}

/*
 * We could've just used fadeIn in reverse, but a unique name
 * will make it easier to watch for in event listeners.
 */
@keyframes fadeToReset {
	  0% { opacity: 1; }
	100% { opacity: 0; }
}

// slide open from icon to accommodate name
@keyframes widenForContent {
	0% {
		padding-left: 0;
		max-width: $notificationSqDim;
	}
	100% {
		padding-left: 30px;
		/*
		 * Animation frames will continue to this value, though the visual
		 * "expansion" result will stop once the elements have met their
		 * combined width: auto.
		 */
		max-width: 50vw;
	}
}

@keyframes spin360 {
	  0% { transform: rotate(  0deg); }
	100% { transform: rotate(360deg); }
}
